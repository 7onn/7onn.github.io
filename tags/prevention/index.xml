<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>prevention on 📜🧙‍♂️ tom's blog</title><link>https://www.7onn.dev/tags/prevention/</link><description>Recent content in prevention on 📜🧙‍♂️ tom's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jan 2022 09:00:00 -0300</lastBuildDate><atom:link href="https://www.7onn.dev/tags/prevention/index.xml" rel="self" type="application/rss+xml"/><item><title>Change management</title><link>https://www.7onn.dev/post/change-management/</link><pubDate>Fri, 28 Jan 2022 09:00:00 -0300</pubDate><guid>https://www.7onn.dev/post/change-management/</guid><description>This following content is a transcript from Site Reliability Engineering with some, maybe none, personal adjustments.
Probably, &amp;gt;70% of the outages are due to changes in a live system.
Best practices in this domain are to use automation to accomplish the following:
Implementing progressive rollouts Quickly and accurately detecting problems Rolling back changes safely when problems arise This trio of practices effectively minimizes the aggregate number of users and operations exposed to harmful changes.</description></item></channel></rss>