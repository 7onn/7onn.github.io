<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>connections on 📜🧙‍♂️ tom's blog</title><link>https://www.7onn.dev/tags/connections/</link><description>Recent content in connections on 📜🧙‍♂️ tom's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Jan 2024 19:00:00 +0100</lastBuildDate><atom:link href="https://www.7onn.dev/tags/connections/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP Connections and Buffers in Go</title><link>https://www.7onn.dev/post/tcp-connections-and-buffers-in-go/</link><pubDate>Fri, 12 Jan 2024 19:00:00 +0100</pubDate><guid>https://www.7onn.dev/post/tcp-connections-and-buffers-in-go/</guid><description>Introduction It&amp;rsquo;s a Friday, but I&amp;rsquo;m on call, so I can&amp;rsquo;t go out with my friends. Also, my New Year&amp;rsquo;s resolution for 2024 was to study and write more. So, here&amp;rsquo;s this post.
Software engineers are are usually very keen on common internet protocols like HTTP(S), WebSocket (which is an HTTP connection that stays alive even after the server has responded), and gRPC. But then I thought &amp;ldquo;I&amp;rsquo;ve never written a TCP server&amp;rdquo; and I decided to do one.</description></item></channel></rss>